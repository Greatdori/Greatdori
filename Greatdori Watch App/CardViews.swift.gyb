//
//  CardViews.swift
//  Greatdori
//
//  Created by Mark Chan on 7/23/25.
//

import SwiftUI
import DoriKit
import SDWebImageSwiftUI

struct EventCardView: View {
    private var eventImageURL: URL
    private var title: DoriAPI.LocalizedData<String>
    private var startAt: DoriAPI.LocalizedData<Date>
    private var endAt: DoriAPI.LocalizedData<Date>
    private var locale: DoriAPI.Locale?
    private var showsCountdown: Bool
    
%{
    eventTypes = ["PreviewEvent", "Event"]
}%
    % for eventType in eventTypes:
    init(_ event: DoriAPI.Event.${eventType}, inLocale locale: DoriAPI.Locale?, showsCountdown: Bool = false) {
        self.eventImageURL = event.bannerImageURL
        self.title = event.eventName
        self.startAt = event.startAt
        self.endAt = event.endAt
        self.locale = locale
        self.showsCountdown = showsCountdown
    }
    % end
    
    var body: some View {
        ZStack {
            WebImage(url: eventImageURL) { image in
                image
            } placeholder: {
                RoundedRectangle(cornerRadius: 10)
                    .fill(Color.gray.opacity(0.15))
            }
            .resizable()
            .scaledToFill()
            .frame(width: screenBounds.width - 5, height: 100)
            .clipped()
            .cornerRadius(10)
            HStack {
                Spacer()
                VStack {
                    Spacer()
                    Text(locale != nil ? (title.forLocale(locale!) ?? title.jp ?? "") : (title.forPreferredLocale() ?? ""))
                        .padding(.horizontal, 2)
                        .background {
                            RoundedRectangle(cornerRadius: 5)
                                .fill(Material.ultraThin)
                                .blur(radius: 5)
                        }
                    if showsCountdown {
                        Group {
                            if let startDate = locale != nil ? startAt.forLocale(locale!) : startAt.forPreferredLocale(),
                               let endDate = locale != nil ? endAt.forLocale(locale!) : startAt.forPreferredLocale() {
                                if startDate > .now {
                                    Text("\(Text(startDate, style: .relative))后开始\(locale != nil ? " (\(locale!.rawValue.uppercased()))" : "")")
                                } else if endDate > .now {
                                    Text("\(Text(endDate, style: .relative))后结束\(locale != nil ? " (\(locale!.rawValue.uppercased()))" : "")")
                                } else {
                                    Text("已结束\(locale != nil ? " (\(locale!.rawValue.uppercased()))" : "")")
                                }
                            } else {
                                Text("未开始\(locale != nil ? " (\(locale!.rawValue.uppercased()))" : "")")
                            }
                        }
                        .padding(.horizontal, 2)
                        .background {
                            RoundedRectangle(cornerRadius: 5)
                                .fill(Material.ultraThin)
                                .blur(radius: 5)
                        }
                    }
                }
                .font(.system(size: 12))
                .lineLimit(1)
                .padding(.horizontal, 4)
                Spacer()
            }
        }
        .listRowBackground(Color.clear)
        .listRowInsets(.init(top: 0, leading: 0, bottom: 0, trailing: 0))
    }
}

struct CardCardView: View {
    private var normalBackgroundImageURL: URL
    private var trainedBackgroundImageURL: URL?
    private var cardType: DoriAPI.Card.CardType
    private var attribute: DoriAPI.Attribute
    private var rarity: Int
    private var bandIconImageURL: URL
    
%{
    cardTypes = ["PreviewCard", "Card"]
}%
    % for cardType in cardTypes:
    init(_ card: DoriAPI.Card.${cardType}, band: DoriAPI.Band.Band) {
        self.normalBackgroundImageURL = card.coverNormalImageURL
        self.trainedBackgroundImageURL = card.coverAfterTrainingImageURL
        self.cardType = card.type
        self.attribute = card.attribute
        self.rarity = card.rarity
        self.bandIconImageURL = band.iconImageURL
    }
    % end
    
    var body: some View {
        ZStack {
            if let trainedBackgroundImageURL {
                if ![.others, .campaign, .birthday].contains(cardType) {
                    HStack(spacing: 0) {
                        WebImage(url: normalBackgroundImageURL) { image in
                            image
                        } placeholder: {
                            RoundedRectangle(cornerRadius: 10)
                                .fill(Color.gray.opacity(0.15))
                        }
                        .resizable()
                        .interpolation(.high)
                        .antialiased(true)
                        .scaledToFill()
                        .frame(width: (screenBounds.width - 5) / 2)
                        .clipped()
                        WebImage(url: trainedBackgroundImageURL) { image in
                            image
                        } placeholder: {
                            RoundedRectangle(cornerRadius: 10)
                                .fill(Color.gray.opacity(0.15))
                        }
                        .resizable()
                        .interpolation(.high)
                        .antialiased(true)
                        .scaledToFill()
                        .frame(width: (screenBounds.width - 5) / 2)
                        .clipped()
                    }
                } else {
                    WebImage(url: trainedBackgroundImageURL) { image in
                        image
                    } placeholder: {
                        RoundedRectangle(cornerRadius: 10)
                            .fill(Color.gray.opacity(0.15))
                    }
                    .resizable()
                    .interpolation(.high)
                    .antialiased(true)
                    .cornerRadius(2)
                }
            } else {
                WebImage(url: normalBackgroundImageURL) { image in
                    image
                } placeholder: {
                    RoundedRectangle(cornerRadius: 10)
                        .fill(Color.gray.opacity(0.15))
                }
                .resizable()
                .interpolation(.high)
                .antialiased(true)
                .cornerRadius(2)
            }
            if rarity != 1 {
                Image("CardBorder\(rarity)")
                    .resizable()
            } else {
                Image("CardBorder\(rarity)\(attribute.rawValue.prefix(1).uppercased() + attribute.rawValue.dropFirst())")
                    .resizable()
            }
            VStack {
                HStack {
                    WebImage(url: bandIconImageURL)
                        .resizable()
                        .interpolation(.high)
                        .antialiased(true)
                        .frame(width: 25, height: 25)
                    Spacer()
                    WebImage(url: attribute.iconImageURL)
                        .resizable()
                        .interpolation(.high)
                        .antialiased(true)
                        .frame(width: 23, height: 23)
                }
                Spacer()
                HStack {
                    VStack(alignment: .leading, spacing: 0) {
                        ForEach(1...rarity, id: \.self) { _ in
                            Image(rarity >= 4 ? .trainedStar : .star)
                                .resizable()
                                .frame(width: 16, height: 16)
                        }
                    }
                    Spacer()
                }
            }
        }
        .frame(width: screenBounds.width - 5, height: (screenBounds.width - 5) * 0.7511244378)
        .listRowBackground(Color.clear)
        .listRowInsets(.init(top: 0, leading: 0, bottom: 0, trailing: 0))
    }
}
struct ThumbCardCardView: View {
    private var thumbNormalImageURL: URL
    private var thumbTrainedImageURL: URL?
    private var cardType: DoriAPI.Card.CardType
    private var attribute: DoriAPI.Attribute
    private var rarity: Int
    private var bandIconImageURL: URL
    private var prefix: DoriAPI.LocalizedData<String>
    
%{
    cardTypes = ["PreviewCard", "Card"]
}%
    % for cardType in cardTypes:
    init(_ card: DoriAPI.Card.${cardType}, band: DoriAPI.Band.Band) {
        self.thumbNormalImageURL = card.thumbNormalImageURL
        self.thumbTrainedImageURL = card.thumbAfterTrainingImageURL
        self.cardType = card.type
        self.attribute = card.attribute
        self.rarity = card.rarity
        self.bandIconImageURL = band.iconImageURL
        self.prefix = card.prefix
    }
    % end
    
    var body: some View {
        HStack {
            if let thumbTrainedImageURL {
                ZStack {
                    WebImage(url: thumbTrainedImageURL) { image in
                        image
                    } placeholder: {
                        RoundedRectangle(cornerRadius: 10)
                            .fill(Color.gray.opacity(0.15))
                    }
                    .resizable()
                    .interpolation(.high)
                    .antialiased(true)
                    .scaledToFill()
                    .clipped()
                    upperLayer(trained: true)
                }
                .frame(width: 50, height: 50)
            } else {
                ZStack {
                    WebImage(url: thumbNormalImageURL) { image in
                        image
                    } placeholder: {
                        RoundedRectangle(cornerRadius: 10)
                            .fill(Color.gray.opacity(0.15))
                    }
                    .resizable()
                    .interpolation(.high)
                    .antialiased(true)
                    .cornerRadius(2)
                    upperLayer(trained: false)
                }
                .frame(width: 50, height: 50)
            }
            VStack(alignment: .leading) {
                Text(prefix.forPreferredLocale() ?? "")
                    .font(.system(size: 16, weight: .semibold))
                Text(cardType.localizedString)
                    .font(.system(size: 14))
            }
        }
    }
    
    @ViewBuilder
    private func upperLayer(trained: Bool) -> some View {
        if rarity != 1 {
            Image("CardThumbBorder\(rarity)")
                .resizable()
        } else {
            Image("CardThumbBorder\(rarity)\(attribute.rawValue.prefix(1).uppercased() + attribute.rawValue.dropFirst())")
                .resizable()
        }
        VStack {
            HStack {
                WebImage(url: bandIconImageURL)
                    .resizable()
                    .interpolation(.high)
                    .antialiased(true)
                    .frame(width: 15, height: 15)
                Spacer()
                WebImage(url: attribute.iconImageURL)
                    .resizable()
                    .interpolation(.high)
                    .antialiased(true)
                    .frame(width: 12, height: 12)
            }
            Spacer()
            HStack {
                VStack(alignment: .leading, spacing: 0) {
                    ForEach(1...rarity, id: \.self) { _ in
                        Image(trained ? .trainedStar : .star)
                            .resizable()
                            .frame(width: 6, height: 6)
                    }
                }
                Spacer()
            }
        }
    }
}

struct ThumbCostumeCardView: View {
    private var thumbImageURL: URL
    private var description: DoriAPI.LocalizedData<String>
    
%{
    costumeTypes = ["PreviewCostume", "Costume"]
}%
    % for costumeType in costumeTypes:
    init(_ costume: DoriAPI.Costume.${costumeType}) {
        self.thumbImageURL = costume.thumbImageURL
        self.description = costume.description
    }
    % end
    
    var body: some View {
        HStack {
            WebImage(url: thumbImageURL) { image in
                image
            } placeholder: {
                RoundedRectangle(cornerRadius: 10)
                    .fill(Color.gray.opacity(0.15))
            }
            .resizable()
            .scaledToFit()
            .frame(width: 50)
            Text(description.forPreferredLocale() ?? "")
        }
    }
}

struct GachaCardView: View {
    private var bannerImageURL: URL
    private var title: DoriAPI.LocalizedData<String>
    
%{
    gachaTypes = ["PreviewGacha", "Gacha"]
}%
    % for gachaType in gachaTypes:
    init(_ gacha: DoriAPI.Gacha.${gachaType}) {
        self.bannerImageURL = gacha.bannerImageURL
        self.title = gacha.gachaName
    }
    % end
    
    var body: some View {
        ZStack {
            WebImage(url: bannerImageURL) { image in
                image
            } placeholder: {
                RoundedRectangle(cornerRadius: 10)
                    .fill(Color.gray.opacity(0.15))
            }
            .resizable()
            .scaledToFill()
            .frame(width: screenBounds.width - 5, height: 100)
            .clipped()
            .cornerRadius(10)
            HStack {
                Spacer()
                VStack {
                    Spacer()
                    Text(title.forPreferredLocale() ?? "")
                        .padding(.horizontal, 2)
                        .background {
                            RoundedRectangle(cornerRadius: 5)
                                .fill(Material.ultraThin)
                                .blur(radius: 5)
                        }
                }
                .font(.system(size: 12))
                .lineLimit(1)
                .padding(.horizontal, 4)
                Spacer()
            }
        }
        .listRowBackground(Color.clear)
        .listRowInsets(.init(top: 0, leading: 0, bottom: 0, trailing: 0))
    }
}
