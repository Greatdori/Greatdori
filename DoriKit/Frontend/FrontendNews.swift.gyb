//===---*- Greatdori! -*---------------------------------------------------===//
//
// FrontendNews.swift.gyb
//
// This source file is part of the Greatdori! open source project
//
// Copyright (c) 2025 the Greatdori! project authors
// Licensed under Apache License v2.0
//
// See https://greatdori.memz.top/LICENSE.txt for license information
// See https://greatdori.memz.top/CONTRIBUTORS.txt for the list of Greatdori! project authors
//
//===----------------------------------------------------------------------===//

import Foundation
private import Builtin

extension DoriFrontend {
    /// Request and fetch data about news in Bandori.
    public enum News {
        /// List all news with a filter.
        ///
        /// - Parameter filter: A filter for filtering result, nil means don't filter.
        /// - Returns: All news, nil if failed to fetch.
        @inline(never)
        public static func list(filter: ListFilter? = nil) async -> [ListItem]? {
            // list = news + recent
            // News provides articles like patch notes,
            // we need to process `recent` manually.
            let groupResult = await withTasksResult {
                await DoriAPI.News.all()
            } _: {
                await DoriAPI.News.recent()
            }
            guard let news = groupResult.0 else { return nil }
            guard let recent = groupResult.1 else { return nil }
            var unsortedResult = [ListItem]()
            
            // First, we add all news, typed `article`.
            unsortedResult.append(
                contentsOf: news.map { news in
                    .init(
                        type: .article,
                        relatedID: news.id,
                        title: news.title,
                        author: news.authors.joined(separator: ", "),
                        timestamp: news.timestamp,
                        tags: news.tags,
                        subject: news.title,
                        locale: nil,
                        timeMark: .hasPublished
                    )
            })
            
            // These filter types don't need data from `recent`,
            // we filter them then directly return.
            if let filter, [ListFilter.bestdori, .article, .patchNote].contains(filter) {
                unsortedResult = switch filter {
                case .bestdori:
                    unsortedResult.filter { $0.tags.contains("Bestdori!") }
                case .article:
                    unsortedResult.filter { $0.tags.contains("Article") }
                case .patchNote:
                    unsortedResult.filter { $0.tags.contains("Patch Note") }
                default: Builtin.unreachable()
                }
                return unsortedResult.sorted { $0.timestamp > $1.timestamp }
            }
            
            // Then, we iterate over each subcategories of `recent`
            
%{
    subcategories = ["songs", "events", "gacha", "loginBonuses"]
    itemTypesOfSubcategory = {"songs": "song", "events": "event", "gacha": "gacha", "loginBonuses": "loginCampaign"}
    tagsOfSubcategory = {"songs": "Song", "events": "Event", "gacha": "Gacha", "loginBonuses": "Login Campaign"}
    localizationKeyOfSubcategory = {"songs": "SONG", "events": "EVENT", "gacha": "GACHA", "loginBonuses": "LOGIN_CAMPAIGN"}
    namePropOfSubgategory = {"songs": "musicTitle", "events": "eventName", "gacha": "gachaName", "loginBonuses": "caption"}
}%
            
            % for subcategory in subcategories:
            for item in recent.${subcategory} {
                // Process locales separately
                for locale in DoriAPI.Locale.allCases {
                    guard item.${namePropOfSubgategory[subcategory]}.availableInLocale(locale) else { continue }
                    % if subcategory == "events":
                    if let startDate = item.startAt.forLocale(locale) {
                    % else:
                    if let startDate = item.publishedAt.forLocale(locale) {
                    % end
                        if startDate > .now {
                            // Not started yet
                            let comparing = if startDate.assertSameDay(to: .now) <= .now {
                                // Show as published today
                                Date.now
                            } else {
                                // Show as published yesterday
                                Date(timeIntervalSince1970: Date.now.timeIntervalSince1970 - 86400)
                            }
                            let interval = startDate.interval(to: comparing).day!
                            if interval != 0 {
                                unsortedResult.append(.init(
                                    type: .${itemTypesOfSubcategory[subcategory]},
                                    relatedID: item.id,
                                    title: String(
                                        localized: "${localizationKeyOfSubcategory[subcategory]}_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_WILL_START_AFTER_\(interval)_DAYS",
                                        bundle: #bundle
                                    ),
                                    author: "Bestdori! Update Bot",
                                    timestamp: comparing.componentsRewritten(
                                        hour: startDate.components.hour,
                                        minute: startDate.components.minute,
                                        second: startDate.components.second
                                    ),
                                    tags: ["Update", "GBP", locale.rawValue.uppercased(), "${tagsOfSubcategory[subcategory]}"],
                                    subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                    locale: locale,
                                    timeMark: .willStartAfter(interval)
                                ))
                            } else {
                                unsortedResult.append(.init(
                                    type: .${itemTypesOfSubcategory[subcategory]},
                                    relatedID: item.id,
                                    title: String(
                                        localized: "${localizationKeyOfSubcategory[subcategory]}_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_WILL_START_TODAY",
                                        bundle: #bundle
                                    ),
                                    author: "Bestdori! Update Bot",
                                    timestamp: comparing.componentsRewritten(
                                        hour: startDate.components.hour,
                                        minute: startDate.components.minute,
                                        second: startDate.components.second
                                    ),
                                    tags: ["Update", "GBP", locale.rawValue.uppercased(), "${tagsOfSubcategory[subcategory]}"],
                                    subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                    locale: locale,
                                    timeMark: .willStartToday
                                ))
                            }
                        % if subcategory != "songs":
                        %     if subcategory == "events":
                        } else if let endDate = item.endAt.forLocale(locale) {
                        %     else:
                        } else if let endDate = item.closedAt.forLocale(locale) {
                        %     end
                            // Started
                            if endDate <= .now {
                                // Already ended
                                unsortedResult.append(.init(
                                    type: .${itemTypesOfSubcategory[subcategory]},
                                    relatedID: item.id,
                                    title: String(
                                        localized: "${localizationKeyOfSubcategory[subcategory]}_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_HAS_ENDED",
                                        bundle: #bundle
                                    ),
                                    author: "Bestdori! Update Bot",
                                    timestamp: endDate,
                                    tags: ["Update", "GBP", locale.rawValue.uppercased(), "${tagsOfSubcategory[subcategory]}"],
                                    subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                    locale: locale,
                                    timeMark: .hasEnded
                                ))
                            } else {
                                // Not ended yet
                                let comparing = if endDate.assertSameDay(to: .now) <= .now {
                                    // Show as published today
                                    Date.now
                                } else {
                                    // Show as published yesterday
                                    Date(timeIntervalSince1970: Date.now.timeIntervalSince1970 - 86400)
                                }
                                let interval = endDate.interval(to: comparing).day!
                                if interval != 0 {
                                    unsortedResult.append(.init(
                                        type: .${itemTypesOfSubcategory[subcategory]},
                                        relatedID: item.id,
                                        title: String(
                                            localized: "${localizationKeyOfSubcategory[subcategory]}_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_WILL_END_AFTER_\(interval)_DAYS",
                                            bundle: #bundle
                                        ),
                                        author: "Bestdori! Update Bot",
                                        timestamp: comparing.componentsRewritten(
                                            hour: endDate.components.hour,
                                            minute: endDate.components.minute,
                                            second: endDate.components.second
                                        ),
                                        tags: ["Update", "GBP", locale.rawValue.uppercased(), "${tagsOfSubcategory[subcategory]}"],
                                        subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                        locale: locale,
                                        timeMark: .willEndAfter(interval)
                                    ))
                                } else {
                                    unsortedResult.append(.init(
                                        type: .${itemTypesOfSubcategory[subcategory]},
                                        relatedID: item.id,
                                        title: String(
                                            localized: "${localizationKeyOfSubcategory[subcategory]}_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_WILL_END_TODAY",
                                            bundle: #bundle
                                        ),
                                        author: "Bestdori! Update Bot",
                                        timestamp: comparing.componentsRewritten(
                                            hour: endDate.components.hour,
                                            minute: endDate.components.minute,
                                            second: endDate.components.second
                                        ),
                                        tags: ["Update", "GBP", locale.rawValue.uppercased(), "${tagsOfSubcategory[subcategory]}"],
                                        subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                        locale: locale,
                                        timeMark: .willEndToday
                                    ))
                                }
                            }
                        }
                        % else:
                        } else {
                            // Published
                            unsortedResult.append(.init(
                                type: .${itemTypesOfSubcategory[subcategory]},
                                relatedID: item.id,
                                title: String(
                                    localized: "SONG_\(item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!)_IN_\(locale.rawValue.uppercased())_HAS_PUBLISHED",
                                    bundle: #bundle
                                ),
                                author: "Bestdori! Update Bot",
                                timestamp: startDate,
                                tags: ["Update", "GBP", locale.rawValue.uppercased(), "Song"],
                                subject: item.${namePropOfSubgategory[subcategory]}.forLocale(locale)!,
                                locale: locale,
                                timeMark: .hasPublished
                            ))
                        }
                        % end
                    }
                }
            }
            % end
            
            // Apply filters before removal and sorting to reduce complexity
            if let filter {
                unsortedResult = switch filter {
                case .update:
                    unsortedResult.filter { $0.tags.contains("Update") }
                case .locale(let locale):
                    unsortedResult.filter { $0.tags.contains(locale.rawValue.uppercased()) }
                
                // We still handle these 3 cases though they are handled before
                // to avoid usage of `default`.
                case .bestdori:
                    unsortedResult.filter { $0.tags.contains("Bestdori!") }
                case .article:
                    unsortedResult.filter { $0.tags.contains("Article") }
                case .patchNote:
                    unsortedResult.filter { $0.tags.contains("Patch Note") }
                }
            }
            
            // Last, we remove news that should be published in future.
            unsortedResult.removeAll { $0.timestamp > Date.now }
            
            return unsortedResult.sorted { $0.timestamp > $1.timestamp }
        }
    }
}

extension DoriFrontend.News {
    public struct ListItem: Sendable, Hashable, DoriCache.Cacheable {
        public var type: ItemType
        public var relatedID: Int
        public var title: String
        public var author: String
        public var timestamp: Date
        public var tags: [String]
        public var subject: String
        public var locale: DoriAPI.Locale?
        public var timeMark: TimeMark
        
        public enum ItemType: Sendable, Hashable, DoriCache.Cacheable {
            case article
            case song
            case loginCampaign
            case event
            case gacha
        }
        
        @frozen
        public enum TimeMark: Sendable, Hashable, DoriCache.Cacheable {
            case willStartAfter(Int)
            case willStartToday
            case hasEnded
            case willEndAfter(Int)
            case willEndToday
            case hasPublished
        }
    }
    
    public enum ListFilter: Equatable, Hashable, Sendable {
        case bestdori
        case article
        case patchNote
        case update
        case locale(DoriAPI.Locale)
    }
}
