//
//  PreCache.swift
//  Greatdori
//
//  Created by Mark Chan on 7/31/25.
//

import Foundation



extension DoriCache {
    // Generated by BuildTool/PreCacheGen
    public struct PreCache: Sendable, Decodable {
        public var bands: [DoriAPI.Band.Band]
        public var mainBands: [DoriAPI.Band.Band]
        public var characters: [DoriAPI.Character.PreviewCharacter]
        public var birthdayCharacters: [DoriAPI.Character.BirthdayCharacter]
        public var categorizedCharacters: DoriFrontend.Character.CategorizedCharacters
        public var characterDetails: [Int: DoriAPI.Character.Character] // [CharacterID: Detail]
    }
    
    @inline(never)
    public static let preCache: PreCache = {
        #if DORIKIT_ENABLE_PRECACHE
        let decoder = PropertyListDecoder()
        let result = try! decoder.decode(PreCache.self, from: Data(contentsOf: #bundle.url(forResource: "PreCache", withExtension: "cache")!))
        return result
        #else
        .init(bands: [], mainBands: [], characters: [], birthdayCharacters: [], categorizedCharacters: [], characterDetails: [:])
        #endif
    }()
    
    @_transparent
    public static var preCacheAvailability: Bool {
        #if DORIKIT_ENABLE_PRECACHE
        true
        #else
        false
        #endif
    }
    
    internal static func preCachedData(byID id: String) -> Any? {
        switch id {
        case "CharacterList": preCache.categorizedCharacters
        case "Home_Birthdays": preCache.birthdayCharacters
        case let x where x.hasPrefix("CharacterDetail_"):
            if let characterID = Int(String(x.dropFirst("CharacterDetail_".count))) {
                preCache.characterDetails[characterID]
            } else {
                nil
            }
        default: nil
        }
    }
}
