//===---*- Greatdori! -*---------------------------------------------------===//
//
// DriverTopLevelTypes.swift
//
// This source file is part of the Greatdori! open source project
//
// Copyright (c) 2025 the Greatdori! project authors
// Licensed under Apache License v2.0
//
// See https://greatdori.memz.top/LICENSE.txt for license information
// See https://greatdori.memz.top/CONTRIBUTORS.txt for the list of Greatdori! project authors
//
//===----------------------------------------------------------------------===//

// MARK: - API

// MARK: Basic Types
public typealias DoriLocale = DoriAPI.Locale
public typealias LocalizedData = DoriAPI.LocalizedData
public typealias Constellation = DoriAPI.Constellation
public typealias Attribute = DoriAPI.Attribute

// MARK: Login Campaign
public typealias LoginCampaign = DoriAPI.LoginCampaign.Campaign
public typealias PreviewLoginCampaign = DoriAPI.LoginCampaign.PreviewCampaign

extension LoginCampaign {
    @inlinable
    public static func all() async -> [PreviewLoginCampaign]? {
        await DoriAPI.LoginCampaign.all()
    }
}
extension PreviewLoginCampaign {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.LoginCampaign.all()
    }
}

// MARK: News
public typealias NewsItem = DoriAPI.News.Item
public typealias PreviewNewsItem = DoriAPI.News.PreviewItem
public typealias RecentNewsItems = DoriAPI.News.RecentItems

extension NewsItem {
    @inlinable
    public static func all() async -> [PreviewNewsItem]? {
        await DoriAPI.News.all()
    }
}
extension PreviewNewsItem {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.News.all()
    }
}
extension RecentNewsItems {
    @inlinable
    public static func all() async -> Self? {
        await DoriAPI.News.recent()
    }
}

// MARK: Types with preview
%{
    baseNames = ["Costume", "Event", "Gacha", "Song"]
}%
% for baseName in baseNames:
public typealias ${baseName} = DoriAPI.${baseName}.${baseName}
public typealias Preview${baseName} = DoriAPI.${baseName}.Preview${baseName}

extension ${baseName} {
    @inlinable
    public static func all() async -> [Preview${baseName}]? {
        await DoriFrontend.${baseName}.list()
    }
}
extension Preview${baseName} {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriFrontend.${baseName}.list()
    }
}
% end

// MARK: Types without preview
%{
    baseNames = ["Band", "Comic", "Degree", "Skill", "MiracleTicket"]
}%
% for baseName in baseNames:
public typealias ${baseName} = DoriAPI.${baseName}.${baseName}

extension ${baseName} {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.${baseName}.all()
    }
}
% end

// MARK: Band
extension Band {
    @inlinable
    public static func main() async -> [Self]? {
        await DoriAPI.Band.main()
    }
}

// MARK: Card
public typealias Card = DoriAPI.Card.Card
public typealias PreviewCard = DoriAPI.Card.PreviewCard
public typealias CardType = DoriAPI.Card.CardType
public typealias CardEpisode = DoriAPI.Card.CardEpisode
public typealias CardStat = DoriAPI.Card.CardStat

extension Card {
    @inlinable
    public static func all() async -> [PreviewCard]? {
        await DoriAPI.Card.all()
    }
    
    @inlinable
    public static func allWithBand() async -> [CardWithBand]? {
        await DoriFrontend.Card.list()
    }
}
extension PreviewCard {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.Card.all()
    }
    
    @inlinable
    public static func allWithBand() async -> [CardWithBand]? {
        await DoriFrontend.Card.list()
    }
}

// MARK: Character
public typealias Character = DoriAPI.Character.Character
public typealias PreviewCharacter = DoriAPI.Character.PreviewCharacter
public typealias BirthdayCharacter = DoriAPI.Character.BirthdayCharacter
public typealias CategorizedCharacters = DoriFrontend.Character.CategorizedCharacters

extension Character {
    @inlinable
    public static func all() async -> [PreviewCharacter]? {
        await DoriAPI.Character.all()
    }
    
    @inlinable
    public static func categorized() async -> CategorizedCharacters? {
        await DoriFrontend.Character.categorizedCharacters()
    }
}
extension PreviewCharacter {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.Character.all()
    }
    
    @inlinable
    public static func categorized() async -> CategorizedCharacters? {
        await DoriFrontend.Character.categorizedCharacters()
    }
}
extension BirthdayCharacter {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriAPI.Character.allBirthday()
    }
}

// MARK: - Frontend

public typealias DoriFilter = DoriFrontend.Filter
public typealias DoriFilterable = DoriFrontend.Filterable
public typealias DoriSorter = DoriFrontend.Sorter
public typealias DoriSortable = DoriFrontend.Sortable
public typealias DoriSearchable = DoriFrontend.Searchable
public typealias DoriURLValidator = DoriFrontend.URLValidator

%{
    baseNames = ["Card", "Character", "Costume", "Event", "Gacha", "Song"]
}%
% for baseName in baseNames:
public typealias Extended${baseName} = DoriFrontend.${baseName}.Extended${baseName}
% end

public typealias CardWithBand = DoriFrontend.Card.CardWithBand

extension BirthdayCharacter {
    @inlinable
    public static func recent() async -> [Self]? {
        await DoriFrontend.Character.recentBirthdayCharacters()
    }
}

extension CategorizedCharacters {
    @inlinable
    public static func all() async -> CategorizedCharacters? {
        await DoriFrontend.Character.categorizedCharacters()
    }
}

extension Event {
    @inlinable
    public static func localizedLatest() async -> LocalizedData<PreviewEvent>? {
        await DoriFrontend.Event.localizedLatestEvent()
    }
}
extension PreviewEvent {
    @inlinable
    public static func localizedLatest() async -> LocalizedData<Self>? {
        await DoriFrontend.Event.localizedLatestEvent()
    }
}

public typealias NewsListItem = DoriFrontend.News.ListItem
public typealias NewsListFilter = DoriFrontend.News.ListFilter

extension NewsListItem {
    @inlinable
    public static func all(filter: NewsListFilter? = nil) async -> [Self]? {
        await DoriFrontend.News.list(filter: filter)
    }
}

public typealias ExtendedMiracleTicket = DoriFrontend.MiracleTicket.ExtendedMiracleTicket

extension ExtendedMiracleTicket {
    @inlinable
    public static func all() async -> [Self]? {
        await DoriFrontend.MiracleTicket.extendedList()
    }
}

// MARK: - Cache
public typealias DoriCacheable = DoriCache.Cacheable
public typealias PreCache = DoriCache.PreCache
public typealias CachePromise = DoriCache.Promise
public typealias CacheTrait = DoriCache.CacheTrait

@inline(__always)
public func withDoriCache<Result: Sendable & DoriCacheable>(
    id: String,
    trait: CacheTrait = .invocationElidable,
    invocation: sending @escaping () async -> Result?
) -> CachePromise<Result?> {
    DoriCache.withCache(id: id, trait: trait, invocation: invocation)
}

public typealias PreloadDescriptor = DoriCache.PreloadDescriptor

@inline(__always)
public func preload<T: Sendable>(_ closure: sending @escaping () async -> T?) -> PreloadDescriptor<T> {
    DoriCache.preload(closure)
}
@inline(__always)
public func withPreloaded<each T, Result>(
    _ descriptors: repeat PreloadDescriptor<each T>?,
    isolation: isolated (any Actor)? = #isolation,
    operation: () async throws -> Result
) async rethrows -> Result {
    try await DoriCache.withPreloaded(repeat each descriptors, isolation: isolation, operation: operation)
}
